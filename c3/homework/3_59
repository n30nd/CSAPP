3.59 ◆◆
The following code computes the 128-bit product of two 64-bit signed values x and
y and stores the result in memory:
1 typedef __int128 int128_t;
2
3 void store_prod(int128_t *dest, int64_t x, int64_t y) {
4 *dest=x* (int128_t) y;
5 }
Gcc generates the following assembly code implementing the computation:
1 store_prod: 
2 movq %rdx, %rax
3 cqto
4 movq %rsi, %rcx
5 sarq $63, %rcx
6 imulq %rax, %rcx
7 imulq %rsi, %rdx
8 addq %rdx, %rcx
9 mulq %rsi
10 addq %rcx, %rdx
11 movq %rax, (%rdi)
12 movq %rdx, 8(%rdi)
13 ret
This code uses three multiplications for the multiprecision arithmetic required
to implement 128-bit arithmetic on a 64-bit machine. Describe the algorithm used
to compute the product, and annotate the assembly code to show how it realizes
your algorithm. Hint: When extending arguments of x and y to 128 bits, they can
be rewritten as x = 264 . xh + xl and y = 264 . yh + yl, where xh, xl, yh, and yl are 64-
bit values. Similarly, the 128-bit product can be written as p = 264 . ph + pl, where
ph and pl are 64-bit values. Show how the code computes the values of ph and pl
in terms of xh, xl, yh, and y


Solve:
ux = x + 2^64*x_63 
uy = y + 2^64*y_63

ux*uy = x*y + 2^64*(x_63*y + y_63*x) + xy*2^128
mod 128 we we have 
ux*uy = x*y + 2^64*(x_63*y + y_63*x)
=> x*y = ux*uy + 2^64*(-x_63*y - y_63*x)

Lets analytic the assembly code
dest in %rdi, x in %rsi, y in %rdx
1 store_prod: 
    2 movq %rdx, %rax // rax = y
    3 cqto // (int_128)y => rdx = -1*y_63
    4 movq %rsi, %rcx // rcx = x
    5 sarq $63, %rcx // rcx = x >> 63 = -1*x_63
    6 imulq %rax, %rcx //rcx = -x_63*y
    7 imulq %rsi, %rdx // rdx = -y_63*x
    8 addq %rdx, %rcx // rcx = -x_63*y - y_63*x
    9 mulq %rsi // ux*uy => #rdx:rax 
// above we have z=x*y = ux*uy + 2^64*(-x_63*y - y_63*x)
// Now z_l = rax, z_h = rdx+(-x_63*y - y_63*x)
    10 addq %rcx, %rdx //rdx = (ux*uy)_h + (-x_63*y - y_63*x)
    11 movq %rax, (%rdi) // save lower first byte because little indian
    12 movq %rdx, 8(%rdi) // save high byte
    13 ret