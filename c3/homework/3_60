3.60 ◆◆
Consider the following assembly code:
long loop(long x, int n)
x in %rdi, n in %esi
1 loop:
2 movl %esi, %ecx
3 movl $1, %edx
4 movl $0, %eax
5 jmp .L2
6 .L3:
7 movq %rdi, %r8
8 andq %rdx, %r8
9 orq %r8, %rax
10 salq %cl, %rdx
11 .L2:
12 testq %rdx, %rdx
13 jne .L3
14 rep; ret
The preceding code was generated by compiling C code that had the following
overall form:

1 long loop(long x, long n)
2 {
3 long result = ;
4 long mask;
5 for (mask = ; mask ; mask = ) {
6 result |= ;
7 }
8 return result;
9 }
Your task is to fill in the missing parts of the C code to get a program equivalent
to the generated assembly code. Recall that the result of the function is returned
in register %rax. You will find it helpful to examine the assembly code before,
during, and after the loop to form a consistent mapping between the registers and
the program variables.
A. Which registers hold program values x, n, result, and mask? rdi, ecx, rax, rdx 
B. What are the initial values of result and mask? 0, 1 
C. What is the test condition for mask? mask != 0
D. How does mask get updated? mask <= n 
E. How does result get updated? result |= (x & mask) 
F. Fill in all the missing parts of the C code.

Solve:
long loop(long x, int n)
x in %rdi, n in %esi
1 loop:
    2 movl %esi, %ecx // ecx = n 
    3 movl $1, %edx // edx = 1
    4 movl $0, %eax // eax = 0
    5 jmp .L2 
6 .L3:
    7 movq %rdi, %r8 // r8 = x 
    8 andq %rdx, %r8 // r8 = r8 & rdx 
    9 orq %r8, %rax // rax = rax | r8 
    10 salq %cl, %rdx rdx <<= cl 
11 .L2:
    12 testq %rdx, %rdx
    13 jne .L3 // if rdx != 0 goto L3   => rdx is mask variable
    14 rep; ret


1 long loop(long x, long n)
2 {
    3 long result = "0";
    4 long mask;
    5 for (mask = "1"; mask "!=0"; mask = "mask <<= (n%256)") {
    6 result |= "x&mask";
    7 }
    8 return result;
9 }